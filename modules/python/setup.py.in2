#********************************************************************************
#*                               Dionaea
#*                           - catches bugs -
#*
#*
#*
#* Copyright (C) 2009  Paul Baecher & Markus Koetter
#* 
#* This program is free software; you can redistribute it and/or
#* modify it under the terms of the GNU General Public License
#* as published by the Free Software Foundation; either version 2
#* of the License, or (at your option) any later version.
#* 
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU General Public License for more details.
#* 
#* You should have received a copy of the GNU General Public License
#* along with this program; if not, write to the Free Software
#* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#* 
#* 
#*             contact nepenthesdev@gmail.com  
#*
#*******************************************************************************/

from distutils.core import setup
from distutils.extension import Extension
from distutils.util import convert_path
import os
from Cython.Distutils import build_ext

pyev_version = "0.9.0"
PYEV_VERSION = "\"{0}\"".format(pyev_version)

def find_packages(base_path):
    base_path = convert_path(base_path)
    found = []
    for root, dirs, files in os.walk(base_path, followlinks=True):
        dirs[:] = [d for d in dirs if d[0] != '.' and d not in ('ez_setup', '__pycache__')]
        relpath = os.path.relpath(root, base_path)
        parent = relpath.replace(os.sep, '.').lstrip('.')
        if relpath != '.' and parent not in found:
            continue
        for dir in dirs:
            if os.path.isfile(os.path.join(root, dir, '__init__.py')):
                package = '.'.join((parent, dir)) if parent else dir
                found.append(package)
    return found

core_cflags = '${GLIB2_CFLAGS};' # glib
core_cflags += '${GMODULE2_CFLAGS}' # gmodule

core_ldflags = '${GLIB2_LDFLAGS};' # glib
core_ldflags += '${GMODULE2_LDFLAGS}' # gmodule

core_include_dirs = set()
core_extra_compile_flags = set()
for i in core_cflags.split(';'):
    if i == '':
        continue
    elif i.startswith('-I'):
        core_include_dirs.add(i[2:])
    else:
        core_extra_compile_flags.add(i)

core_libraries = set()
core_library_dirs = set()
core_library_other_flags = set()

for i in core_ldflags.split(';'):
    if i == '':
        continue
    elif i.startswith('-l'):
        core_libraries.add(i[2:])
    elif i.startswith('-L'):
        core_library_dirs.add(i[2:])
    else:
        core_library_other_flags.add(i)

ext_modules=[
    Extension("dionaea.core",
        ['${CMAKE_CURRENT_SOURCE_DIR}/binding.pyx'],
        language="c",
        include_dirs=['${CMAKE_CURRENT_SOURCE_DIR}/../../include', '${CMAKE_CURRENT_SOURCE_DIR}/../../'] + list(core_include_dirs),
        extra_compile_args=list(core_extra_compile_flags),
        libraries=list(core_libraries),
        library_dirs=list(core_library_dirs),
        extra_link_args=list(core_library_other_flags),
        undef_macros=[('NDEBUG')],
        define_macros=[('_GNU_SOURCE',None), ("PYEV_VERSION", PYEV_VERSION)],
    ),
    Extension("dionaea.pyev",
        ['${CMAKE_CURRENT_SOURCE_DIR}/pyev/pyev.c'],
        language="c",
        include_dirs=['${CMAKE_CURRENT_SOURCE_DIR}/../../include', '${CMAKE_CURRENT_SOURCE_DIR}/../../'],
        extra_compile_args=[],
        libraries=[],
        library_dirs=[],
        extra_link_args=[],
        undef_macros=[('NDEBUG')],
        define_macros=[('_GNU_SOURCE',None), ("PYEV_VERSION", PYEV_VERSION)],
    ),
]

setup(
    name = 'dionaea',
    version="${DIONAEA_VERSION}",
    cmdclass = {'build_ext': build_ext},
    ext_modules = ext_modules,
    packages=find_packages(base_path='${CMAKE_CURRENT_SOURCE_DIR}'),
    package_dir={'': '${CMAKE_CURRENT_SOURCE_DIR}'}
)
